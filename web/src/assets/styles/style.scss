// reset
* {
  box-sizing: border-box;
  outline: none;
}
html {
  font-size: 13px;
}
body {
  margin: 0;
  font-family: Arial, Helvetica, sans-serif;
  line-height: 1.2em;
  background: #f1f1f1;
}
a {
  color: #999;
}

// color 键与颜色名重名时，用“”引起来
$colors: (
  primary: #db9e3f,
  "white": #fff,
  "black": #000,
  "dark": #222,
  "gray": #999,
  "gray-1": #666,
  "light": #f9f9f9,
  "dark-l":#333,
);
@each $colorKey, $color in $colors {
  .text-#{$colorKey} {
    color: $color
  }
  .bg-#{$colorKey} {
    background-color: $color
  }
}

// text
@each $var in (left, center, right) {
  .text-#{$var} {
    text-align: $var;
  }
}

// font-size 1rem=13px
$base-font-size: 1rem;
$font-size: (
  xxs: 0.6154, // 10px
  xs: 0.7692, // 10px
  sm: 0.9231, // 12px
  md: 1, // 13px
  lg: 1.7692, // 14px
  xl: 1.2308, // 16px
);

@each $sizeKey, $size in $font-size {
  .fs-#{$sizeKey} {
    font-size: $size * $base-font-size;
  }
}

// flex
.d-flex {
  display: flex;
}
.flex-column {
  flex-direction: column;
}
flex-1 {
  flex: 1;
}
.flex-grow-1 {
  flex-grow: 1;
}
$flex-jc: (
  start: flex-start,
  end: flex-end,
  center: center,
  between: space-between,
  around: space-around,
);

@each $jcKey, $value in $flex-jc {
  .jc-#{$jcKey} {
    justify-content: $value
  }
};

$flex-ai: (
  start: flex-start,
  end: flex-end,
  center: center,
  between: space-between,
  around: space-around,
  stretch: stretch,
);

@each $key, $value in $flex-ai {
  .ai-#{$key} {
    align-items: $value;
  }
};

// spacing
// .mt-1 => margin top level 1
$spacing-types: (m: margin, p: padding);
$spacing-directions: (t: top, r: right, b: bottom, l: left);
$spacing-base-size: 1rem;
$spacing-sizes: (0: 0, 1: 0.25, 2: 0.5, 3: 1, 4: 1.5, 5: 3);

@each $typeKey, $type in $spacing-types {
  // .m-1
  @each $sizeKey, $size in $spacing-sizes {
    .#{$typeKey}-#{$sizeKey} {
      #{$type}: $size * $spacing-base-size;
    }
  }
  // .mx-1, .my-1
  @each $sizeKey, $size in $spacing-sizes {
    .#{$typeKey}x-#{$sizeKey} {
      #{$type}-left: $size * $spacing-base-size;
      #{$type}-right: $size * $spacing-base-size;
    }

    .#{$typeKey}y-#{$sizeKey} {
      #{$type}-top: $size * $spacing-base-size;
      #{$type}-bottom: $size * $spacing-base-size;
    }
  }

  // .mt-1
  @each $directionKey, $direction in $spacing-directions {
    @each $sizeKey, $size in $spacing-sizes {
      .#{$typeKey}#{$directionKey}-#{$sizeKey} {
        #{$type}-#{$direction}: $size * $spacing-base-size;
      }
    }
  }
}